// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const CreateAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (bio, birth_year)
VALUES ($1, $2)
RETURNING id, bio, birth_year
`

type CreateAuthorParams struct {
	Bio       string `json:"bio"`
	BirthYear int32  `json:"birth_year"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, CreateAuthor, arg.Bio, arg.BirthYear)
	var i Author
	err := row.Scan(&i.ID, &i.Bio, &i.BirthYear)
	return i, err
}

const GetAuthor = `-- name: GetAuthor :one
SELECT id, bio, birth_year FROM authors
WHERE id = $1
`

func (q *Queries) GetAuthor(ctx context.Context, id int32) (Author, error) {
	row := q.db.QueryRowContext(ctx, GetAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Bio, &i.BirthYear)
	return i, err
}

const GetBioForAuthor = `-- name: GetBioForAuthor :one
SELECT bio FROM authors
WHERE id = $1
`

func (q *Queries) GetBioForAuthor(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRowContext(ctx, GetBioForAuthor, id)
	var bio string
	err := row.Scan(&bio)
	return bio, err
}

const GetInfoForAuthor = `-- name: GetInfoForAuthor :one
SELECT bio, birth_year FROM authors
WHERE id = $1
`

type GetInfoForAuthorRow struct {
	Bio       string `json:"bio"`
	BirthYear int32  `json:"birth_year"`
}

func (q *Queries) GetInfoForAuthor(ctx context.Context, id int32) (GetInfoForAuthorRow, error) {
	row := q.db.QueryRowContext(ctx, GetInfoForAuthor, id)
	var i GetInfoForAuthorRow
	err := row.Scan(&i.Bio, &i.BirthYear)
	return i, err
}

const ListAuthors = `-- name: ListAuthors :many
SELECT id, bio, birth_year FROM authors
ORDER BY id
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, ListAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Bio, &i.BirthYear); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListAuthorsByIDs = `-- name: ListAuthorsByIDs :many
SELECT id, bio, birth_year FROM authors
WHERE id = ANY($1::int[])
`

func (q *Queries) ListAuthorsByIDs(ctx context.Context, dollar_1 []int32) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, ListAuthorsByIDs, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Bio, &i.BirthYear); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateAuthor = `-- name: UpdateAuthor :exec
UPDATE authors
SET
    bio = coalesce($1, bio),
    birth_year = coalesce($2, birth_year)
WHERE id = $3
`

type UpdateAuthorParams struct {
	Bio       sql.NullString `json:"bio"`
	BirthYear sql.NullInt32  `json:"birth_year"`
	ID        int32          `json:"id"`
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {
	_, err := q.db.ExecContext(ctx, UpdateAuthor, arg.Bio, arg.BirthYear, arg.ID)
	return err
}
